apiVersion: v1
kind: ConfigMap
metadata:
  name: oncall-environment
data:
  DATABASE_TYPE: sqlite3
  BROKER_TYPE: redis
  BASE_URL: $DOMAIN
  SECRET_KEY: $SECRET_KEY
  FEATURE_PROMETHEUS_EXPORTER_ENABLED: ${FEATURE_PROMETHEUS_EXPORTER_ENABLED:-false}
  PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-}
  REDIS_URI: redis://redis:6379/0
  DJANGO_SETTINGS_MODULE: settings.hobby
  CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
  CELERY_WORKER_CONCURRENCY: "1"
  CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
  CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
  CELERY_WORKER_BEAT_ENABLED: "True"
  GRAFANA_API_URL: http://grafana:3000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: engine
spec:
  replicas: 1
  selector:
    matchLabels:
      app: engine
  template:
    metadata:
      labels:
        app: engine
    spec:
      containers:
      - name: engine
        image: grafana/oncall
        ports:
        - containerPort: 8080
        command:
        - sh
        - -c
        - "uwsgi --ini uwsgi.ini"
        envFrom:
        - configMapRef:
            name: oncall-environment
        volumeMounts:
        - name: oncall-data
          mountPath: /var/lib/oncall
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - nc -z -w 1 prometheus 9090 && nc -z -w 1 redis 6379
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - uwsgi --reload /tmp/uwsgi.pid
          initialDelaySeconds: 5
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: engine
spec:
  selector:
    app: engine
  ports:
  - port: 8080
    targetPort: 8080
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery
  template:
    metadata:
      labels:
        app: celery
    spec:
      containers:
      - name: celery
        image: grafana/oncall
        command:
        - sh
        - -c
        - "./celery_with_exporter.sh"
        envFrom:
        - configMapRef:
            name: oncall-environment
        volumeMounts:
        - name: oncall-data
          mountPath: /var/lib/oncall
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - nc -z -w 1 prometheus 9090 && nc -z -w 1 redis 6379
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - uwsgi --reload /tmp/uwsgi.pid
          initialDelaySeconds: 5
          periodSeconds: 10

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oncall-db-migration
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oncall-db-migration
  template:
    metadata:
      labels:
        app: oncall-db-migration
    spec:
      containers:
      - name: oncall-db-migration
        image: grafana/oncall
        command:
        - python
        - manage.py
        - migrate
        - --noinput
        envFrom:
        - configMapRef:
            name: oncall-environment
        volumeMounts:
        - name: oncall-data
          mountPath: /var/lib/oncall
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - nc -z -w 1 prometheus 9090 && nc -z -w 1 redis 6379
          initialDelaySeconds: 5
          periodSeconds: 10

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus
        hostname: prometheus
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-data
          mountPath: /prometheus
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/${GRAFANA_IMAGE:-grafana:latest}
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: ${GRAFANA_USER:-admin}
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: ${GRAFANA_PASSWORD:-admin}
        - name: GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS
          value: grafana-oncall-app
        - name: GF_INSTALL_PLUGINS
          value: grafana-oncall-app
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        readinessProbe:
          httpGet:
            path: /login
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7.0.5
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: LoadBalancer
