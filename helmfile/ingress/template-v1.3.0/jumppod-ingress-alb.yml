replicaCount: 1

secret:
  enabled: false
  name: ""
  mountPath: {}
  subPath: {}
  readOnly: true
  data: {}

configMap:
  enabled: true
  name: "jumppod"
  mountPath: /app/core/config
  readOnly: true
  data:
    .app.config.json : |-
      {
          "AppName": "Commons Service",
          "GRPCTimeout": 10,
          "CacheExpiry": 300,
          "CacheCleanup": 600,
          "DefaultPageLimit": 3,
          "ClientTimeout": 10
      }

image:
  repository: devopscorner/cicd:alpine
  pullPolicy: IfNotPresent  # IfNotPresent -or- Always
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "jumppod-alb"

serviceAccount:
  create: true
  annotations: {}
  name: jumppod
  namespace: devops-tools

service:
  enabled: true
  type: NodePort
  # (range: 30000-32767)
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
      nodePort: 31080
    - name: rpc
      port: 9001
      protocol: TCP
      targetPort: 9001
      nodePort: 31090

container:
  ports:
    - name: http
      containerPort: 80
      protocol: TCP
    - name: rpc
      containerPort: 9001
      protocol: TCP

envFrom:
  enabled: true
  envFrom:
    - configMapRef:
        name: jumppod-config

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    alb.ingress.kubernetes.io/actions.jumppod-alb: >
      {"Type":"forward","TargetGroups":[{"ServiceName":"jumppod-alb","ServicePort":"31080","weight":100}],"TargetGroupArn": "arn:aws:elasticloadbalancing:ap-southeast-1:YOUR_AWS_ACCOUNT:targetgroup/TARGET_GROUP_NAME/TARGET_GROUP_ID"}
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-southeast-1:YOUR_AWS_ACCOUNT:certificate/HASH_ID
    alb.ingress.kubernetes.io/group.name: devopscorner-tf-alb-eks-staging-dev.jumppods
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTPS
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}, {"HTTP": 3000}, {"HTTP": 5000}, {"HTTP": 80}]'
    alb.ingress.kubernetes.io/load-balancer-name: devopscorner-tf-alb-eks-staging-dev
    alb.ingress.kubernetes.io/load-balancer-attributes: deletion_protection.enabled=true
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/security-groups: sg-0949c28a8fbea6933,sg-05ea550a9bc51f2f6
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-1-2017-01
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    # PUBLIC SUBNET
    alb.ingress.kubernetes.io/subnets: subnet-1234567890,subnet-0987654321
    alb.ingress.kubernetes.io/target-node-labels: eks.amazonaws.com/nodegroup=devops-tools_node,node=devops-tools
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/tags: Environment=DEV,Service=ALB,Department=DEVOPS,DepartmentGroup=DEV-DEVOPS,Type=PRODUCTS,ProductName=DEVOPSCORNER,ProductGroup=DEV-DEVOPSCORNER,ResourceGroup=DEV-ALB-DEVOPSCORNER,Name=devopscorner-tf-alb-eks-staging-dev
  hosts:
    - host: jumppod-alb.awscb.id
      http:
        paths:
          - path: /
            # pathType: Prefix   # Prefix -or - ImplementationSpecific
            backend:
              serviceName: jumppod-alb
              servicePort: use-annotation
  tls: []

application:
  enabled: true
  env:
    - name: HELM_TEMPLATE_NAME
      value: api

resources:
  limits:
    cpu: 200m
    memory: 200Mi
  requests:
    cpu: 140m
    memory: 170Mi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector:
  enabled: true
  select:
    node: "devops-tools"   # DEV/UAT Cluster

tolerations: []

affinity: {}

podAnnotations: {}

podSecurityContext: {}

securityContext: {}